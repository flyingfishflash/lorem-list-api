# repository secrets:
# -------------------
# - deploy_to_host
# - drone_deployer_ssh_key_private
# - drone_deployer_ssh_username
# - registry  = registry.domain.tld/lorem-list/lorem-list-api

# organization secrets:
# -------------------
# - nyx_flyingfishflash_token_codeberg
# - nyx_flyingfishflash_token_github
# - nyx_flyingfishflash_token_gitlab
# - nyx_flyingfishflash_token_lan
# - registry_hostname
# - registry_password
# - registry_username
# - sonar_host
# - sonar_token

kind: pipeline
type: docker
name: "build"

trigger:
  event:
    - push
    - tag
  ref:
    - refs/heads/build-*
    - refs/heads/ci-*
    - refs/heads/dependencies
    - refs/heads/dependency-*
    - refs/heads/dependency
    - refs/heads/feature-*
    - refs/heads/fix-*
    - refs/heads/main
    - refs/heads/perf-*
    - refs/heads/refactor-*
    - refs/heads/release
    - refs/heads/style-*
    - refs/heads/test-*

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

services:
  - name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: lorem-list
      POSTGRES_PASSWORD: lorem-list
      POSTGRES_DB: lorem-list

steps:
  # nyx requires git tags to infer the current version
  - name: fetch git tags
    image: registry.flyingfishflash.net/flyingfishflash/nyx:latest
    commands:
      - git fetch --tags -q

  - name: verify postgres
    image: postgres
    commands:
      - |
        until psql "dbname=lorem-list host=postgres user=lorem-list password=lorem-list port=5432" \
          -c "select 1;" >/dev/null 2>&1; do sleep 1; done
      - |
        psql "dbname=lorem-list host=postgres user=lorem-list password=lorem-list port=5432" \
          -c "select count(*) from pg_catalog.pg_tables;"

  - name: build
    image: gradle:8-jdk22
    depends_on:
      - fetch git tags
      - verify postgres
    commands:
      - export GRADLE_USER_HOME=/drone/drone_cache/$DRONE_REPO/gradle-user-home
      - echo $GRADLE_USER_HOME
      - mkdir -pv $GRADLE_USER_HOME
      - touch $GRADLE_USER_HOME/gradle.properties
      - echo org.gradle.caching=true > $GRADLE_USER_HOME/gradle.properties
      - echo org.gradle.daemon=false >> $GRADLE_USER_HOME/gradle.properties
      - export GRADLE_PROJECT_BUILD_DIR=/drone/drone_cache/$DRONE_REPO/build
      - echo $GRADLE_PROJECT_BUILD_DIR
      - mkdir -pv $GRADLE_PROJECT_BUILD_DIR
      - >
        gradle
        :explodebootjar
        :copyBuildInfo
        :testClasses
        :spotlessCheck
        :test
        :integrationTests
        :bootBuildInfo
        -Pspring.profiles.active=h2
        -PbuildDir=$GRADLE_PROJECT_BUILD_DIR
      - >
        gradle
        :integrationTests
        -Pspring.profiles.active=postgresql
        -Pspring.datasource.url=jdbc:postgresql://postgres:5432/lorem-list?reWriteBatchedInserts=true
        -Pspring.datasource.username=lorem-list
        -Pspring.datasource.password=lorem-list
        -Pspring.datasource.platform=postgresql
        -PbuildDir=$GRADLE_PROJECT_BUILD_DIR
      - >
        /drone/src/scripts/ci/drone/drone-is-sonar-configured.sh &&
        gradle
        sonar
        -Dsonar.host.url=$SONAR_HOST
        -Dsonar.token=$SONAR_TOKEN
        -Dsonar.qualitygate.wait=true
        -PbuildDir=$GRADLE_PROJECT_BUILD_DIR
    environment:
      SONAR_HOST:
        from_secret: sonar_host
      SONAR_TOKEN:
        from_secret: sonar_token
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

---
kind: pipeline
name: "publish - image"
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/ci-*
    - refs/heads/dependencies
    - refs/heads/dependency-*
    - refs/heads/dependency
    - refs/heads/feature-*
    - refs/heads/fix-*
    - refs/heads/perf-*
    - refs/heads/refactor-*
    - refs/heads/release

depends_on:
  - "build"

volumes:
  - name: drone_cache_build
    host:
      path: /var/lib/docker/volumes_managed/drone_cache/lorem-list/lorem-list-api/build

environment:
  TAGS: .tags
  VERSION: .version

steps:
  - name: generate image tags
    image: registry.flyingfishflash.net/flyingfishflash/nyx:latest
    commands:
      # nyx requires git tags to infer the current version
      - git fetch --tags -q
      - nyx infer --fatal
      - nyx infer --fatal | grep 'current version' | awk '{ print $4 > ".version.tmp" }'
      - tr -d '\n' < .version.tmp > $VERSION
      - cp $VERSION $TAGS
      - cat $TAGS && echo

  - name: publish
    image: plugins/docker
    depends_on:
      - generate image tags
    privileged: true
    settings:
      auto_tag: false
      context: /drone/src/
      dockerfile: /drone/src/Containerfile
      repo:
        from_secret: registry
      registry:
        from_secret: registry_hostname
      username:
        from_secret: registry_username
      password:
        from_secret: registry_password
    volumes:
      - name: drone_cache_build
        path: /drone/src/build

---
kind: pipeline
name: "publish - release"
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/release

depends_on:
  - "publish - image"

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

steps:
  - name: "publish - release"
    image: registry.flyingfishflash.net/flyingfishflash/nyx:latest
    environment:
      NYX_FLYINGFISHFLASH_TOKEN_CODEBERG:
        from_secret: nyx_flyingfishflash_token_codeberg
#      NYX_FLYINGFISHFLASH_TOKEN_GITHUB:
#        from_secret: nyx_flyingfishflash_token_github
#      NYX_FLYINGFISHFLASH_TOKEN_GITLAB:
#        from_secret: nyx_flyingfishflash_token_gitlab
      NYX_FLYINGFISHFLASH_TOKEN_LAN:
        from_secret: nyx_flyingfishflash_token_lan
    commands:
      # nyx requires git tags to infer the current version
      - git fetch --tags -q
      # nyx is configured to push to the 'lan' remote
      # the 'lan' remote is mirrored to codeberg
      - git remote add lan https://forgejo.flyingfishflash.net/lorem-list/lorem-list-api.git
      - mkdir /drone/src/build
      - nyx publish --dry-run=false
    volumes:
      - name: drone_cache
        path: /drone/cache

---
kind: pipeline
name: "deploy [dev]"
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/ci-*
    - refs/heads/dependencies
    - refs/heads/feature-*
    - refs/heads/fix-*
    - refs/heads/perf-*
    - refs/heads/refactor-*

depends_on:
  - "publish - image"

environment:
  VERSION: .version

steps:
  - name: infer version
    image: registry.flyingfishflash.net/flyingfishflash/nyx:latest
    commands:
      # nyx requires git tags to infer the current version
      - git fetch --tags -q
      - rm -fv $VERSION
      - echo "export NYX_CURRENT_VERSION=$(nyx infer --fatal | grep 'current version' | awk '{ print $NF }' | tr -d '\n')" > $VERSION
      - cat $VERSION

  - name: create inventory file
    image: alpine:latest
    environment:
      DEPLOY_TO_HOST:
        from_secret: deploy_to_host
    commands:
      - echo "$DEPLOY_TO_HOST" > scripts/ci/drone/deploy/inventory

  - name: create variables file
    image: alpine
    depends_on:
      - infer version
    environment:
      REGISTRY_URL:
        from_secret: REGISTRY_HOSTNAME
    commands:
      - source $VERSION
      - ls -la
      - echo "---" > scripts/ci/drone/deploy/variables.yaml
      - 'echo "tag: $NYX_CURRENT_VERSION" >> scripts/ci/drone/deploy/variables.yaml'
      - 'echo "registry_url: $REGISTRY_URL/lorem-list" >> scripts/ci/drone/deploy/variables.yaml'
      - 'echo "deploy_to_host: $DEPLOY_TO_HOST" >> scripts/ci/drone/deploy/variables.yaml'
      - cat scripts/ci/drone/deploy/variables.yaml

  # the secret containing the ssh private key must be created via the CLI
  # drone secret add --repository lorem-list/lorem-list-api --name secret_name --data @/home/xxx/.ssh/id_xxx
  - name: execute deployment
    image: plugins/ansible
    depends_on:
      - create inventory file
      - create variables file
    settings:
      extra_vars: 'region=dev'
      galaxy: scripts/ci/drone/deploy/requirements.yaml
      inventory: scripts/ci/drone/deploy/inventory
      playbook: scripts/ci/drone/deploy/deploy.yaml
      private_key:
        from_secret: drone_deployer_ssh_key_private
      user:
        from_secret: drone_deployer_ssh_username

---
kind: pipeline
name: "deploy [prd]"
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/release

depends_on:
  - "publish - image"

environment:
  VERSION: .version

steps:
  - name: infer version
    image: registry.flyingfishflash.net/flyingfishflash/nyx:latest
    commands:
      # nyx requires git tags to infer the current version
      - git fetch --tags -q
      - rm -fv $VERSION
      - echo "export NYX_CURRENT_VERSION=$(nyx infer --fatal | grep 'current version' | awk '{ print $NF }' | tr -d '\n')" > $VERSION
      - cat $VERSION

  - name: create inventory file
    image: alpine:latest
    environment:
      DEPLOY_TO_HOST:
        from_secret: deploy_to_host
    commands:
      - echo "$DEPLOY_TO_HOST" > scripts/ci/drone/deploy/inventory

  - name: create variables file
    image: alpine
    depends_on:
      - infer version
    environment:
      REGISTRY_URL:
        from_secret: REGISTRY_HOSTNAME
    commands:
      - source $VERSION
      - ls -la
      - echo "---" > scripts/ci/drone/deploy/variables.yaml
      - 'echo "tag: $NYX_CURRENT_VERSION" >> scripts/ci/drone/deploy/variables.yaml'
      - 'echo "registry_url: $REGISTRY_URL/lorem-list" >> scripts/ci/drone/deploy/variables.yaml'
      - 'echo "deploy_to_host: $DEPLOY_TO_HOST" >> scripts/ci/drone/deploy/variables.yaml'
      - cat scripts/ci/drone/deploy/variables.yaml

  # the secret containing the ssh private key must be created via the CLI
  # drone secret add --repository lorem-list/lorem-list-api --name secret_name --data @/home/xxx/.ssh/id_xxx
  - name: execute deployment
    image: plugins/ansible
    depends_on:
      - create inventory file
      - create variables file
    settings:
      extra_vars: 'region=prd'
      galaxy: scripts/ci/drone/deploy/requirements.yaml
      inventory: scripts/ci/drone/deploy/inventory
      playbook: scripts/ci/drone/deploy/deploy.yaml
      private_key:
        from_secret: drone_deployer_ssh_key_private
      user:
        from_secret: drone_deployer_ssh_username

---
kind: pipeline
name: "validate"
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/ci-*
    - refs/heads/dependencies
    - refs/heads/feature-*
    - refs/heads/fix-*
    - refs/heads/perf-*
    - refs/heads/refactor-*
    - refs/heads/release

depends_on:
  - "deploy [dev]"
  - "deploy [prd]"

steps:
  - name: verify api is up [dev]
    image: docker.io/alpine/httpie
    environment:
      TERM: xterm-256color
      OPTIONS: --verify=no --style=gruvbox-dark --pretty=all --print=mhb
      URL:
        from_secret: url_dev
    commands:
      - https --sorted $OPTIONS get $URL/api/v1/management/health
      - https --sorted $OPTIONS get $URL/api/v1/management/info
      - https $OPTIONS get $URL/api/v1/public/lists
      # below items return HTTP 401
      # - https $OPTIONS get $URL/api/v1/items
      # - https $OPTIONS get $URL/api/v1/lists
      # - https $OPTIONS get $URL/api/v1/lists/00000000-0000-4000-a000-000000000000
    when:
      ref:
        exclude:
          - refs/heads/release

  - name: verify api is up [prd]
    image: docker.io/alpine/httpie
    environment:
      TERM: xterm-256color
      OPTIONS: --verify=no --style=gruvbox-dark --pretty=all --print=mhb
      URL:
        from_secret: url_prd
    commands:
      - https --sorted $OPTIONS get $URL/api/v1/management/health
      - https --sorted $OPTIONS get $URL/api/v1/management/info
      - https $OPTIONS get $URL/api/v1/public/lists
      # below items return HTTP 401
      # - https $OPTIONS get $URL/api/v1/items
      # - https $OPTIONS get $URL/api/v1/lists
      # - https $OPTIONS get $URL/api/v1/lists/00000000-0000-4000-a000-000000000000
    when:
      ref:
        include:
          - refs/heads/release
